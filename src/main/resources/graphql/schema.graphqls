interface WorkshopParticipant{
    name: String
}

type Course {
    id:ID!
    title:String
    description:String
    professors: [Professor]
    students: [Student]
}

type Professor implements WorkshopParticipant{
    id:ID!
    name:String
}

type Student implements WorkshopParticipant{
    id:ID!
    name:String
    level:Int
}

union All = Professor|Student

type Query {
    allCourses:[Course]
    allStudents:[Student]
    allProfessors:[Professor]
    allAll: [All]
    allWorkshopParticipants: [WorkshopParticipant]
}

input CreateCourseInput{
    title: String
    description: String
}

#Input type for updating courses
input UpdateCourseInput{
    #ID of existing course
    id: ID!
    title: String
    description: String
    students: [ID]
    professors: [ID]
}

type Mutation {
    createCourse(title: String, description: String): Course
    updateCourse(id: ID!, title: String, description: String): Course
    createCourseByInput(input: CreateCourseInput): Course
    updateCourseByInput(input: UpdateCourseInput): Course
    deleteCourse(id: ID!) : Boolean
}

type CourseGrade {
    course:Course
    student:Student
    grade:Int
}

type Subscription {
    getGrades(courseId: ID): CourseGrade
}

schema{
    query: Query
    mutation: Mutation
    subscription: Subscription
}